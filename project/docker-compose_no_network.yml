services:
  # Define the first service as 'postgres'
  pgdatabase:
    # Specify the image to pull
    image: postgres:13
    # restart: always    
    # Specify the environment variables to pass to Postgres
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=movie_data
    # Volumes = way of mapping a dir from our host machine file system to a dir in the container (Mounting)
    # - This is making sure our data is still there if we stop running Docker
    # - Because Docker does NOT keep the state
    # - We are mapping/mounting "./movie_postgres_data" to "/var/lib/postgresql/data"
    # - needs the full path      
    volumes:
      - "./movie_postgres_data:/var/lib/postgresql/data:rw"
    # Need to specify the port we are mapping from the host machine to one on the container
    ports:
      - "5432:5432"

  # Define the second service as 'pgadmin'
  # - This is the standard web-based GUI for Postgres data exploration and querying (both local and remote servers)
  pgadmin:
    # Specify the image to pull
    image: dpage/pgadmin4
    # restart: always    
    # Specify the environment variables to pass to pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    # Specify the port we are mapping
    ports:
      - "8080:80" 

# Check for running containers with `docker ps`

# Run with `winpty docker run -it [imagename]` => `winpty docker run -it postgres:13`

# The flag -it instructs Docker to allocate a pseudo-TTY connected to the containerâ€™s stdin
#   - Creating an interactive bash shell in the container
# Set environment variables with `-e` flag
# Set volumes with `-v` flag
# Set port with `-p` flag

# INSTRUCTIONS:
# winpty docker run -it \
#  -e POSTGRES_USER="root" \
#  -e POSTGRES_PASSWORD="root" \
#  -e POSTGRES_DB="ny_taxi" \
#  -v C://Users//[rest of path]//ny_taxi_postgres_data:/var/lib/postgresql/data:rw \
#  -p 5432:5432 \
#  postgres:13

